Purpose:
This reusable workflow builds a Docker image from a specified Dockerfile and assigns it a tag.

Inputs:
- imageTag (required): The tag to assign to the Docker image (e.g., my-repo/my-app:latest).
- dockerfile (optional): Path to the Dockerfile (default: Dockerfile).

Outputs:
Returns an object containing:
- image: The Docker image object.
- imageTag: The tag assigned to the Docker image.

Usage Example:
@Library('your-shared-library-name') _

pipeline {
    agent any

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    def buildResult = dockerBuild(
                        imageTag: 'my-repo/my-app:latest',
                        dockerfile: 'path/to/Dockerfile'
                    )
                    echo "Built image: ${buildResult.imageTag}"
                }
            }
        }
    }
}

Implementation Details:
1. Builds the Docker image using the docker.build() method, passing the specified imageTag and optional dockerfile path.
2. Returns the Docker image object and its tag for downstream use (e.g., pushing the image to a registry).