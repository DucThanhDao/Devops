@Library('devops-jenkins-shared-library') _
import org.utils.DockerUtils

pipeline {
    agent any

    environment {
        REGISTRY = 'ghcr.io'
        GITHUB_REPO = 'https://github.com/DucThanhDao/Devops.git'
        GITHUB_BRANCH = 'master'
    }

    stages {
        stage('Checkout and Get Git Metadata') {
            steps {
                script {
                    // Call the shared library function to checkout and get Git metadata
                    def gitInfo = checkoutAndGetGitInfo(
                        repoUrl: GITHUB_REPO,
                        branch: GITHUB_BRANCH,
                        credentialsId: 'github-pat' // Optional: Defaults to 'github-pat'
                    )

                    // Store values in environment variables for downstream use
                    env.REPO_OWNER = gitInfo.owner
                    env.REPO_NAME = gitInfo.repository
                    env.LAST_COMMIT_SHA = gitInfo.commitSha

                    // Output the extracted information
                    echo "Git owner: ${env.REPO_OWNER}"
                    echo "Git repository: ${env.REPO_NAME}"
                    echo "Git commit SHA: ${env.LAST_COMMIT_SHA}"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Generate the Docker image tag using the utility function
                    def timestamp = sh(script: 'date +%Y%m%d-%H%M%S', returnStdout: true).trim()
                    def imageTag = DockerUtils.generateImageTag(
                        registry: env.REGISTRY,
                        owner: env.REPO_OWNER,
                        repository: env.REPO_NAME,
                        branch: env.GITHUB_BRANCH,
                        gitSha: env.LAST_COMMIT_SHA,
                        timestamp: timestamp
                    )
                    // Build the Docker image
                    def buildInfo = dockerBuild(
                        imageTag: imageTag,
                        dockerfile: './microservice/company-website/Dockerfile'
                    )
                    echo "Built image: ${buildInfo.imageTag}"

                    // Store the image and tag for later use
                    env.IMAGE_TAG = buildInfo.imageTag
                    env.IMAGE_OBJECT = buildInfo.image
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { env.REGISTRY != null && env.REGISTRY != '' }
            }
            steps {
                script {
                    // Push the Docker image to the registry
                    dockerPush(
                        registry: env.REGISTRY,
                        credentialsId: 'github-credential',
                        image: env.IMAGE_OBJECT,
                        imageTag: env.IMAGE_TAG
                    )
                }
            }
        }
    }
}